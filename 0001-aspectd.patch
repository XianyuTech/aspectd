From a6c48f28c28a056faf14d3484e5929c13ce5dffc Mon Sep 17 00:00:00 2001
From: wangziyang <457155134@qq.com>
Date: Tue, 13 Oct 2020 21:00:34 +0800
Subject: [PATCH] for aspectd.patch

---
 packages/flutter_tools/lib/src/aspectd.dart   | 232 ++++++++++++++++++
 .../lib/src/build_system/targets/common.dart  |   9 +
 2 files changed, 241 insertions(+)
 create mode 100644 packages/flutter_tools/lib/src/aspectd.dart

diff --git a/packages/flutter_tools/lib/src/aspectd.dart b/packages/flutter_tools/lib/src/aspectd.dart
new file mode 100644
index 0000000000..de0a6cbec5
--- /dev/null
+++ b/packages/flutter_tools/lib/src/aspectd.dart
@@ -0,0 +1,232 @@
+// Copyright 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+import 'dart:io';
+
+import 'package:package_config/package_config.dart';
+
+import 'artifacts.dart';
+import 'base/common.dart';
+import 'base/file_system.dart';
+import 'build_info.dart';
+import 'build_system/build_system.dart';
+import 'build_system/targets/common.dart';
+import 'cache.dart';
+import 'compile.dart';
+import 'dart/package_map.dart';
+import 'globals.dart' as globals;
+
+const String aspectdImplPackageRelPath = '..';
+const String aspectdImplPackageName = 'aspectd_impl';
+const String frontendServerDartSnapshot = 'frontend_server.dart.snapshot';
+
+class AspectdHook {
+  static String aspectdTransformerSnapshot;
+
+  static Directory getAspectdImplDirectory(Directory rootProjectDir) {
+    return globals.fs.directory(globals.fs.path.normalize(globals.fs.path.join(
+        rootProjectDir.path,
+        aspectdImplPackageRelPath,
+        aspectdImplPackageName)));
+  }
+
+  static Future<Directory> getPackagePathFromConfig(
+      String packageConfigPath, String packageName) async {
+    final PackageConfig packageConfig = await loadPackageConfigWithLogging(
+      globals.fs.file(packageConfigPath),
+      logger: globals.logger,
+    );
+    if ((packageConfig?.packages?.length ?? 0) > 0) {
+      final Package aspectdPackage = packageConfig.packages.toList().firstWhere(
+          (Package element) => element.name == packageName,
+          orElse: () => null);
+      return globals.fs.directory(aspectdPackage.root.toFilePath());
+    }
+    return null;
+  }
+
+  static Future<Directory> getFlutterFrontendServerDirectory(
+      String packagesPath) async {
+    return globals.fs.directory(globals.fs.path.join(
+        (await getPackagePathFromConfig(packagesPath, 'aspectd')).absolute.path,
+        'lib',
+        'src',
+        'flutter_frontend_server'));
+  }
+
+  static Future<bool> isAspectdEnabled() async {
+    final Directory currentDirectory = globals.fs.currentDirectory;
+    final Directory aspectdDirectory =
+        getAspectdImplDirectory(currentDirectory);
+    if(!aspectdDirectory.existsSync()){
+      return false;
+    }
+    final String aspectdImplPackagesPath = globals.fs.path
+        .join(aspectdDirectory.absolute.path, globalPackagesPath);
+    final Directory flutterFrontendServerDirectory =
+        await getFlutterFrontendServerDirectory(aspectdImplPackagesPath);
+    if (!(aspectdDirectory.existsSync() &&
+        flutterFrontendServerDirectory.existsSync() &&
+        currentDirectory.absolute.path != aspectdDirectory.absolute.path &&
+        globals.fs
+            .file(globals.fs.path.join(aspectdDirectory.path, 'pubspec.yaml'))
+            .existsSync() &&
+        globals.fs
+            .file(
+                globals.fs.path.join(aspectdDirectory.path, globalPackagesPath))
+            .existsSync() &&
+        globals.fs
+            .file(globals.fs.path.join(
+                aspectdDirectory.path, 'lib', aspectdImplPackageName + '.dart'))
+            .existsSync())) {
+      return false;
+    }
+    return await checkAspectdFlutterFrontendServerSnapshot(
+        aspectdImplPackagesPath);
+  }
+
+  static Future<bool> checkAspectdFlutterFrontendServerSnapshot(
+      String packagesPath) async {
+    final Directory flutterFrontendServerDirectory =
+        await getFlutterFrontendServerDirectory(packagesPath);
+    final String aspectdFlutterFrontendServerSnapshot = globals.fs.path.join(
+        flutterFrontendServerDirectory.absolute.path,
+        frontendServerDartSnapshot);
+    final String defaultFlutterFrontendServerSnapshot = globals.artifacts
+        .getArtifactPath(Artifact.frontendServerSnapshotForEngineDartSdk);
+    if (!globals.fs.file(aspectdFlutterFrontendServerSnapshot).existsSync()) {
+      final String dartSdkDir = await getDartSdkDependency(
+          (await getPackagePathFromConfig(packagesPath, 'aspectd'))
+              .absolute
+              .path);
+
+      final String frontendServerPackageConfigJsonFile =
+          '${flutterFrontendServerDirectory.absolute.path}/package_config.json';
+      final String rebasedFrontendServerPackageConfigJsonFile =
+          '${flutterFrontendServerDirectory.absolute.path}/rebased_package_config.json';
+      String frontendServerPackageConfigJson = globals.fs
+          .file(frontendServerPackageConfigJsonFile)
+          .readAsStringSync();
+      frontendServerPackageConfigJson = frontendServerPackageConfigJson
+          .replaceAll('../../../third_party/dart', dartSdkDir);
+      globals.fs
+          .file(rebasedFrontendServerPackageConfigJsonFile)
+          .writeAsStringSync(frontendServerPackageConfigJson);
+
+      final List<String> commands = <String>[
+        globals.artifacts.getArtifactPath(Artifact.engineDartBinary),
+        '--deterministic',
+        '--packages=$rebasedFrontendServerPackageConfigJsonFile',
+        '--snapshot=$aspectdFlutterFrontendServerSnapshot',
+        '--snapshot-kind=kernel',
+        '${flutterFrontendServerDirectory.absolute.path}/starter.dart'
+      ];
+      final ProcessResult processResult =
+          await globals.processManager.run(commands);
+      globals.fs.file(rebasedFrontendServerPackageConfigJsonFile).deleteSync();
+      if (processResult.exitCode != 0 ||
+          globals.fs.file(aspectdFlutterFrontendServerSnapshot).existsSync() ==
+              false) {
+        throwToolExit(
+            'Aspectd unexpected error: ${processResult.stderr.toString()}');
+      }
+    }
+    if (globals.fs.file(defaultFlutterFrontendServerSnapshot).existsSync()) {
+      globals.fs.file(defaultFlutterFrontendServerSnapshot).deleteSync();
+    }
+    globals.fs
+        .file(aspectdFlutterFrontendServerSnapshot)
+        .copySync(defaultFlutterFrontendServerSnapshot);
+    return true;
+  }
+
+  static Future<String> getDartSdkDependency(String aspectdDir) async {
+    final ProcessResult processResult = await globals.processManager.run(
+        <String>[
+          globals.fs.path.join(
+              globals.artifacts.getArtifactPath(Artifact.engineDartSdkPath),
+              'bin',
+              'pub'),
+          'get',
+          '--verbosity=warning'
+        ],
+        workingDirectory: aspectdDir,
+        environment: <String, String>{'FLUTTER_ROOT': Cache.flutterRoot});
+    if (processResult.exitCode != 0) {
+      throwToolExit(
+          'Aspectd unexpected error: ${processResult.stderr.toString()}');
+    }
+    final Directory kernelDir = await getPackagePathFromConfig(
+        globals.fs.path.join(aspectdDir, globalPackagesPath), 'kernel');
+    return kernelDir.parent.parent.path;
+  }
+
+  Future<void> runBuildDillCommand(Environment environment) async {
+    final Directory aspectdDir =
+        getAspectdImplDirectory(globals.fs.currentDirectory);
+    final Directory previousDirectory = globals.fs.currentDirectory;
+    globals.fs.currentDirectory = aspectdDir;
+
+    String relativeDir = environment.outputDir.absolute.path
+        .substring(environment.projectDir.absolute.path.length + 1);
+    final String outputDir = globals.fs.path.join(aspectdDir.path, relativeDir);
+
+    final String buildDir =
+        globals.fs.path.join(aspectdDir.path, '.dart_tool', 'flutter_build');
+
+    final Map<String, String> defines = environment.defines;
+    relativeDir = defines[kTargetFile]
+        .substring(environment.projectDir.absolute.path.length + 1);
+    defines[kTargetFile] = globals.fs.path
+        .join(aspectdDir.path, 'lib', aspectdImplPackageName + '.dart');
+
+    final Environment auxEnvironment = Environment(
+        projectDir: aspectdDir,
+        outputDir: globals.fs.directory(outputDir),
+        cacheDir: environment.cacheDir,
+        flutterRootDir: environment.flutterRootDir,
+        fileSystem: environment.fileSystem,
+        logger: environment.logger,
+        artifacts: environment.artifacts,
+        processManager: environment.processManager,
+        engineVersion: environment.engineVersion,
+        buildDir: globals.fs.directory(buildDir),
+        defines: defines,
+        inputs: environment.inputs);
+    const KernelSnapshot auxKernelSnapshot = KernelSnapshot();
+    final CompilerOutput compilerOutput =
+        await auxKernelSnapshot.buildImpl(auxEnvironment);
+
+    final String aspectdDill = compilerOutput.outputFilename;
+    final File originalDillFile = globals.fs.file(
+        globals.fs.path.join(environment.buildDir.absolute.path, 'app.dill'));
+    if (originalDillFile.existsSync()) {
+      originalDillFile.renameSync(originalDillFile.absolute.path + '.bak');
+    }
+    globals.fs.file(aspectdDill).copySync(originalDillFile.absolute.path);
+    globals.fs.currentDirectory = previousDirectory;
+  }
+
+  Future<ProcessResult> transformDill(
+      BuildMode buildMode, String inputDill, String outputDill) async {
+    final List<String> command = <String>[
+      globals.artifacts.getArtifactPath(Artifact.engineDartBinary),
+      aspectdTransformerSnapshot,
+      '--input',
+      inputDill,
+      if (buildMode != BuildMode.release) ...<String>[
+        '--sdk-root',
+        globals.fs
+                .file(globals.artifacts
+                    .getArtifactPath(Artifact.platformKernelDill))
+                .parent
+                .path +
+            globals.fs.path.separator
+      ],
+      '--output',
+      outputDill
+    ];
+    return globals.processManager.run(command);
+  }
+}
diff --git a/packages/flutter_tools/lib/src/build_system/targets/common.dart b/packages/flutter_tools/lib/src/build_system/targets/common.dart
index 7c978656cd..de5d3e076f 100644
--- a/packages/flutter_tools/lib/src/build_system/targets/common.dart
+++ b/packages/flutter_tools/lib/src/build_system/targets/common.dart
@@ -5,6 +5,7 @@
 import 'package:package_config/package_config.dart';

 import '../../artifacts.dart';
+import '../../aspectd.dart';
 import '../../base/build.dart';
 import '../../base/file_system.dart';
 import '../../build_info.dart';
@@ -193,6 +194,13 @@ class KernelSnapshot extends Target {

   @override
   Future<void> build(Environment environment) async {
+    await buildImpl(environment);
+    if (await AspectdHook.isAspectdEnabled()) {
+      await AspectdHook().runBuildDillCommand(environment);
+    }
+  }
+
+  Future<CompilerOutput> buildImpl(Environment environment) async {
     final KernelCompiler compiler = KernelCompiler(
       fileSystem: environment.fileSystem,
       logger: environment.logger,
@@ -268,6 +276,7 @@ class KernelSnapshot extends Target {
     if (output == null || output.errorCount != 0) {
       throw Exception();
     }
+    return output;
   }
 }

--
2.24.2 (Apple Git-127)

